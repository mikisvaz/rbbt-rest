- action_card = ActionCard.new 

= action_parameters do
  - input :list, :select, "Genomic Mutation list", nil, :html_options => {:class => 'favourite_lists', :type => 'GenomicMutation'}
  - input :organism, :string, "Organism Code", entity.organism, :hide => true

- action_card.require :list 
= action_card_render action_card do
 
  - seq_len = entity.sequence.length

  = entity.marked_svg([])

  - mutations = Entity::List.load_list("GenomicMutation", list, user)
  - mutated_isoforms = mutations.mutated_isoforms.compact.flatten

  - mi_proteins = Misc.process_to_hash(mutated_isoforms){|mis| mis.collect{|mi| mi.split(":").first}}
  - mi_positions = Misc.process_to_hash(mutated_isoforms){|mis| mis.select{|mi| mi.split(":").last =~ /[A-Z*]\d+[A-Z*]/}.collect{|mi| mi.split(":").last.scan(/\d+/).first.to_i}}
  - mi_positions = Misc.process_to_hash(mutated_isoforms){|mis| mis.collect{|mi| mi =~ /[A-Z*]\d+[A-Z*]/ ? mi.split(":").last.scan(/\d+/).first.to_i : nil}}

  - protein_position_pairs = mutated_isoforms.collect{|mi| [mi_proteins[mi], mi_positions[mi]] if mi_positions[mi]}.compact
  - positions_over_protein = protein_position_pairs.select{|prot, pos| prot == entity and Integer === pos and pos > 0}.collect{|prot, pos| pos}.flatten.compact

  :javascript
    console.log("Defferring")

    function clear_SVG(positions){
      var svg = $('svg').find('rect.mutation').remove();
    }

    function clear_sequence(){
      $('span.sequence span.line').each(function(){$(this).html($(this).text())});
    }

    function load_positions_in_SVG(positions, color){
      var svg = $('svg[attr-rbbt-entity=protein]').first();
      var seq_len = #{seq_len}

      var width  = parseInt(svg.attr('width'));
      var height = parseInt(svg.attr('height'));
      var start  = parseInt(svg.find('rect.ac').attr('x'));

      $(positions).each(function(pos){
        var position = this
        var offset = (width - start)/seq_len * position + start + Math.random() * 10;
        var rect =  document.createElementNS("http://www.w3.org/2000/svg", "rect");

        rect.setAttributeNS(null, "x", offset);
        rect.setAttributeNS(null, "class", 'mutation');
        rect.setAttributeNS(null, "y", 1);
        rect.setAttributeNS(null, "width",  1);
        rect.setAttributeNS(null, "height",  height);
        rect.setAttributeNS(null, "style", "fill:" + color + ";opacity:0.5;stroke:none;");

        svg[0].appendChild(rect);
      })
    }

    function load_positions_in_sequence(positions, color){

      clear_sequence()

      $($.unique(positions.sort()).sort(function(a,b){return a-b}).reverse()).each(function(){
        var position = this
        var line = Math.floor( (position - 1) / 50 );
        var offset = position - 50 * line

        var sequence_lines = $('span.sequence span.line_count');
        var sequence_line = $($('span.sequence span.line_count')[line]).prev('span.line')

        var updated_sequence_line = sequence_line.html().replace(new RegExp("(.{" + (offset - 1) + "})(.)"), "$1<span class='mutation' style='color:red'>$2</span>")
        sequence_line.html(updated_sequence_line)
        true
      })
    }

    deffer(function(){
      var positions = #{positions_over_protein.to_json};

      console.log("Loading defferred")
      console.log(positions)

      load_positions_in_SVG(positions, 'red');
      load_positions_in_sequence(positions, 'red');
    })
