- map = card.map
- map_id = card.map_id
.entity_map_card(id="#{ map_id.gsub(/\s/,'_') }_card")

  .title
    .name
      = map.key_field
      Map
    .long_name
      = Misc.humanize map_id

  .card
    .sidebar.offcanvas
      .meta
        .map_management
          %ul
            %li
              = reveal "Rename" do
                %form.rename
                  %label New name
                  %input(name='rename' value=map_id)
                  %input(type='submit')
 
            - if %w(pvalue p.value p-value pvalues p.values p-values).include? map.fields.first.downcase.gsub(/\s/,'')
              %li
                - url = add_GET_param(@fullpath, '_format', 'pvalue_score')
                %a.ensembl(href=url) Pvalue score

            - if Gene == Entity.formats[map.key_field]
              - if map.key_field != "Ensembl Gene ID"
                %li
                  - url = add_GET_param(@fullpath, '_format', 'ensembl')
                  %a.ensembl(href=url) Ensembl
              - if map.key_field != "Associated Gene Name"
                %li
                  - url = add_GET_param(@fullpath, '_format', 'name')
                  %a.name(href=url) Name
            - if "Rank" == map.fields.first
              %li
                - url = add_GET_param(@fullpath, '_format', 'invert_ranks')
                %a.invert_ranks(href=url) Invert ranks
            - else
              %li
                - url = add_GET_param(@fullpath, '_format', 'ranks')
                %a.ranks(href=url) Ranks
            - if NumericValue == Entity.formats[map.fields.first] or (map.entity_templates[map.fields.first] and map.entity_templates[map.fields.first].annotation_types.include? NumericValue)
              %li
                - $page_entity_base_type = page_entity_base_type 
                - $page_entity_map_column = page_entity_map_column 
                = reveal :rank_products do
                  = action_parameters nil, :class => 'rank_products' do
                    - input :map, :select, "Select map to use", nil, :html_options => {:class => 'favourite_maps', :type =>  $page_entity_base_type, :column => $page_entity_map_column}



    .content
      .description
        = table do
          - map
      - if card.action_controller
        .actions
          = action_controller_render(card.action_controller)

